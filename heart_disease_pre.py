# -*- coding: utf-8 -*-
"""Heart_Disease_pre.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b9yvfWiGxpd473WQC_XpEJA1uUvfTIoc

first downloading dataset from Kaggle(UCI machine learning resposiory)

importing dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""data collection and processing"""

#loading the csv data to a pandas dataframe
heart_data = pd.read_csv('/content/heart_disease_data_pre.csv')

#print first 5 rows of the dataset
heart_data.head()

#print last 5 rows of the dataset
heart_data.tail()

#checking number of rows and columns in dataset
heart_data.shape

#Gettting information about the data
heart_data.info()

#checking misssing values in the dataset
heart_data.isnull().sum()

#Doing statistical measures about the data
heart_data.describe()

# checking distribution of target variable
heart_data['target'].value_counts()

"""1 present --> Defective heart
0 --> Healthy heart

Splitting the features and target. visualizing heart disease vs different heath factors like:- age, cholesterol, chest pain type
"""

#graph for age vs outcome(getting heart disease)
import matplotlib.pyplot as plt
import seaborn as sns

sns.lmplot(x='age', y='target', data=heart_data, fit_reg=True,ci=None)

#serum cholesterol (in mg/dl) vs outcome(getting heart disease)
sns.lmplot(x='chol', y='target', data=heart_data, fit_reg=True,ci=None)

# cp(chest pain type) vs outcome(getting heart disease)
sns.lmplot(x='cp', y='target', data=heart_data, fit_reg=True,ci=None)

heart_data.plot.hist(y='target')

x = heart_data.drop(columns='target', axis=1)
y = heart_data['target']

print(x)

print(y)

"""Splitting the data into Training data and Test data"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, stratify=y, random_state=2)

print(x.shape, x_train.shape, x_test.shape)

"""Training ML Model using Logistic Regression"""

model = LogisticRegression()

#Training model with training data
model.fit(x_train, y_train)

"""Evaluating Model

Accuracy Score
"""

#finding accuracy on training data
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)

print('Accuracy on Training data : ', training_data_accuracy)

"""Got accuracy of 85.12% on Training data"""

#finding accuracy on test data
x_test_prediction = model.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)

print('Accuracy on Test data : ', test_data_accuracy)

"""Got accuracy of 82% on test data

Building a Predictive System
"""

from os import pread
input_data = (43,1,0,120,177,0,0,120,1,2.5,1,0,3)

#Changing input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#Reshaping the numpy array as we are predicting for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

preadiction = model.predict(input_data_reshaped)
print(preadiction)

if(preadiction[0]==0):
  print('The person does not have a heart disease')
else:
  print('The person has heart disease')